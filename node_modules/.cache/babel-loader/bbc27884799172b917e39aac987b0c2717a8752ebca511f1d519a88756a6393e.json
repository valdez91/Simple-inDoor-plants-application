{"ast":null,"code":"var _jsxFileName = \"/home/valdez/Desktop/MyExtra/soloProjReact/Simple-inDoor-plants-application/src/components/PlantPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport NewPlantForm from \"./NewPlantForm\";\nimport PlantList from \"./PlantList\";\nimport Search from \"./Search\";\nimport Header from \"./Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PlantPage() {\n  _s();\n  const [plants, setPlants] = useState([]);\n  const [filteredPlants, setFilteredPlants] = useState([]);\n  const fetchPlants = () => {\n    fetch(\"http://localhost:6001/plants\").then(response => response.json()).then(data => {\n      setPlants(data); // Set all plants\n      setFilteredPlants(data); // Initially, set filtered plants to all plants\n    }).catch(error => {\n      console.error(\"Error fetching plants:\", error);\n    });\n  };\n  const handleSearch = query => {\n    const filtered = plants.filter(plant => plant.name.toLowerCase().includes(query.toLowerCase()));\n    setFilteredPlants(filtered);\n  };\n  const handleAddPlant = newPlant => {\n    // Add the new plant to the plants array\n    setPlants([...plants, newPlant]);\n    // Update filteredPlants to include the new plant\n    setFilteredPlants([...filteredPlants, newPlant]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewPlantForm, {\n      onAddPlant: handleAddPlant\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlantList, {\n      plants: filteredPlants\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(PlantPage, \"v2WCxFQsgi6Ltopj93KL9tyMfJc=\");\n_c = PlantPage;\nexport default PlantPage;\nvar _c;\n$RefreshReg$(_c, \"PlantPage\");","map":{"version":3,"names":["React","useState","useEffect","NewPlantForm","PlantList","Search","Header","jsxDEV","_jsxDEV","PlantPage","_s","plants","setPlants","filteredPlants","setFilteredPlants","fetchPlants","fetch","then","response","json","data","catch","error","console","handleSearch","query","filtered","filter","plant","name","toLowerCase","includes","handleAddPlant","newPlant","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddPlant","onSearch","_c","$RefreshReg$"],"sources":["/home/valdez/Desktop/MyExtra/soloProjReact/Simple-inDoor-plants-application/src/components/PlantPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport NewPlantForm from \"./NewPlantForm\";\nimport PlantList from \"./PlantList\";\nimport Search from \"./Search\";\nimport Header from \"./Header\";\n\nfunction PlantPage() {\n  const [plants, setPlants] = useState([]);\n  const [filteredPlants, setFilteredPlants] = useState([]);\n\n  \n  const fetchPlants = () => {\n    fetch(\"http://localhost:6001/plants\")\n      .then((response) => response.json())\n      .then((data) => {\n        setPlants(data); // Set all plants\n        setFilteredPlants(data); // Initially, set filtered plants to all plants\n      })\n      .catch((error) => {\n        console.error(\"Error fetching plants:\", error);\n      });\n  };\n\n  const handleSearch = (query) => {\n    const filtered = plants.filter((plant) =>\n      plant.name.toLowerCase().includes(query.toLowerCase())\n    );\n    setFilteredPlants(filtered);\n  };\n\n  const handleAddPlant = (newPlant) => {\n    // Add the new plant to the plants array\n    setPlants([...plants, newPlant]);\n    // Update filteredPlants to include the new plant\n    setFilteredPlants([...filteredPlants, newPlant]);\n  };\n\n  return (\n    <main>\n      <Header />\n      <NewPlantForm onAddPlant={handleAddPlant} />\n      <Search onSearch={handleSearch} />\n      <PlantList plants={filteredPlants} />\n    </main>\n  );\n}\n\nexport default PlantPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAGxD,MAAMc,WAAW,GAAGA,CAAA,KAAM;IACxBC,KAAK,CAAC,8BAA8B,CAAC,CAClCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACdR,SAAS,CAACQ,IAAI,CAAC,CAAC,CAAC;MACjBN,iBAAiB,CAACM,IAAI,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD,CAAC,CAAC;EACN,CAAC;EAED,MAAME,YAAY,GAAIC,KAAK,IAAK;IAC9B,MAAMC,QAAQ,GAAGf,MAAM,CAACgB,MAAM,CAAEC,KAAK,IACnCA,KAAK,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACN,KAAK,CAACK,WAAW,CAAC,CAAC,CACvD,CAAC;IACDhB,iBAAiB,CAACY,QAAQ,CAAC;EAC7B,CAAC;EAED,MAAMM,cAAc,GAAIC,QAAQ,IAAK;IACnC;IACArB,SAAS,CAAC,CAAC,GAAGD,MAAM,EAAEsB,QAAQ,CAAC,CAAC;IAChC;IACAnB,iBAAiB,CAAC,CAAC,GAAGD,cAAc,EAAEoB,QAAQ,CAAC,CAAC;EAClD,CAAC;EAED,oBACEzB,OAAA;IAAA0B,QAAA,gBACE1B,OAAA,CAACF,MAAM;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV9B,OAAA,CAACL,YAAY;MAACoC,UAAU,EAAEP;IAAe;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5C9B,OAAA,CAACH,MAAM;MAACmC,QAAQ,EAAEhB;IAAa;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClC9B,OAAA,CAACJ,SAAS;MAACO,MAAM,EAAEE;IAAe;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAEX;AAAC5B,EAAA,CAvCQD,SAAS;AAAAgC,EAAA,GAAThC,SAAS;AAyClB,eAAeA,SAAS;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}